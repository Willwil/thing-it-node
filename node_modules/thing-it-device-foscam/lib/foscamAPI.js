module.exports = {
    create: function () {
        return new FoscamAPI();
    }
};

var q = require('q');
var request;

function FoscamAPI() {
    FoscamAPI.prototype.controls = {
        up: 0,
        stopUp: 1,
        down: 2,
        stopDown: 3,
        right: 4,
        stopRight: 5,
        left: 6,
        stopLeft: 7,
        setPreset1: 30,
        goToPreset1: 31,
        setPreset2: 32,
        goToPreset2: 33,
        setPreset3: 34,
        goToPreset3: 35,
        setPreset4: 36,
        goToPreset4: 37,
    };

    FoscamAPI.prototype.connect = function (host, port, username, password) {
        var promise;

        if ((host === null) || (host === undefined)) {
            promise = q.fcall(function () {
                throw new Error("Host not defined.");
            });
        }

        if ((port === null) || (port === undefined)) {
            promise = q.fcall(function () {
                throw new Error("Port not defined.");
            });
        }

        if ((username === null) || (username === undefined)) {
            promise = q.fcall(function () {
                throw new Error("Username not defined.");
            });
        }

        if ((password === null) || (password === undefined)) {
            promise = q.fcall(function () {
                throw new Error("Password not defined.");
            });
        }

        if (!promise) {
            this.host = host;
            this.port = port;
            this.username = username;
            this.password = password;

            var connectCommand = '/get_status.cgi?';
            promise = this.sendRequest(connectCommand, true);
        }

        return promise;
    };

    FoscamAPI.prototype.ptzUp = function (continuous) {
        var oneStep = !continuous;
        return this.ptzControl(0, oneStep);
    };

    FoscamAPI.prototype.ptzStopUp = function () {
        return this.ptzControl(1);
    };

    FoscamAPI.prototype.ptzDown = function (continuous) {
        var oneStep = !continuous;
        return this.ptzControl(2, oneStep);
    };

    FoscamAPI.prototype.ptzStopDown = function () {
        return this.ptzControl(3);
    };

    FoscamAPI.prototype.ptzLeft = function (continuous) {
        var oneStep = !continuous;
        return this.ptzControl(4, oneStep);
    };

    FoscamAPI.prototype.ptzStopLeft = function () {
        return this.ptzControl(5);
    };

    FoscamAPI.prototype.ptzRight = function (continuous) {
        var oneStep = !continuous;
        return this.ptzControl(6, oneStep);
    };

    FoscamAPI.prototype.ptzStopRight = function () {
        return this.ptzControl(7);
    };

    FoscamAPI.prototype.ptzControl = function (commandCode, oneStep) {
        var params = 'command=' + commandCode;

        if (oneStep) {
            params = params + '&onestep=1';
        }

        return this.decoderControl(params);
    };

    FoscamAPI.prototype.decoderControl = function (params) {
        var command = '/decoder_control.cgi?' + params;
        return this.sendRequest(command, false);
    };

    FoscamAPI.prototype.getSnapShot = function () {
        return this.sendRequest('/snapshot.cgi?', false, true);
    }

    FoscamAPI.prototype.sendRequest = function (command, decodeResponse, binary) {
        var deferred = q.defer();

        if ((this.host === undefined) || (this.port === undefined) || (this.username === undefined) || (this.password === undefined)) {
            deferred.reject("Missing required parameters, probably due to not calling connect, first.");
        } else {
            var url = 'http://' + this.host + ':' + this.port + command + '&user=' + this.username + '&pwd=' + this.password;

            if (!request) {
                request = require('request');
            }

            var requestOptions = {
                url: url
            };

            if (binary) {
                requestOptions.encoding = null
            }

            request.get(requestOptions, function (error, response, body) {
                if (error) {
                    deferred.reject(error);
                }
                else {
                    if ((body.indexOf) && (body.indexOf('401 Unauthorized') > -1)) {
                        deferred.reject("Unauthorized");
                    } else {
                        var result;

                        if (decodeResponse) {
                            result = {};
                            data = body.split('\n');

                            for (var d in data) {
                                if (data[d] != '') {
                                    var line = data[d].split('var ')
                                    line = String(line[1]).split('=')
                                    line[1] = String(line[1]).replace(/;$/, '')
                                    result[line[0]] = line[1].substr(0, 1) == '\'' ? line[1].substr(1, line[1].length - 2) : line[1]
                                }
                            }
                        } else {
                            if (body.trim) {
                                result = body.trim();
                            } else {
                                result = body;
                            }
                        }

                        deferred.resolve(result);
                    }

                }
            }.bind(this));
        }

        return deferred.promise;
    }

    FoscamAPI.prototype.getVideoCGIUrl = function () {
        return q(encodeURI('http://' + this.host + ":" + this.port +
            "/videostream.cgi?user=" + this.username + "&pwd=" + this.password))
    }
}
