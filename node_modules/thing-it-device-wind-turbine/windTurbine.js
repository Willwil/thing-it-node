module.exports = {
    metadata: {
        family: 'windTurbine',
        plugin: 'windTurbine',
        label: 'Generic Wind Turbine Generator',
        manufacturer: 'Generic',
        discoverable: false,
        tangible: true,
        additionalSoftware: [],
        actorTypes: [],
        sensorTypes: [],
        state: [{
            id: "power",
            label: "Power",
            type: {
                id: "decimal"
            }
        }, {
            id: "idlePower",
            label: "Idle Power",
            type: {
                id: "decimal"
            }
        }
            , {
                id: "windSpeed",
                label: "Wind Speed",
                type: {
                    id: "decimal"
                }
            }, {
                id: "windDirection",
                label: "Wind Direction",
                type: {
                    id: "decimal"
                }
            }, {
                id: "rotorSpeed",
                label: "Rotor Speed",
                type: {
                    id: "decimal"
                }
            }, {
                id: "nacelleDirection",
                label: "Nacelle Direction",
                type: {
                    id: "decimal"
                }
            }, {
                id: "rotorBladeAngle",
                label: "Rotor Blade Angle",
                type: {
                    id: "decimal"
                }
            }, {
                id: "aircraftWarningMarker",
                label: "Aircraft Warning Marker",
                type: {
                    id: "boolean"
                }
            }, {
                id: "rotorDeIcing",
                label: "Rotor De-Icing",
                type: {
                    id: "boolean"
                }
            }],
        services: [{
            id: "changeRotorBladeAngle", label: "Change Rotor Blade Angle", parameters: [{
                id: "value", label: "Value", type: {id: "decimal"}
            }]
        },
            {
                id: "activate", label: "Activate", parameters: []
            },
            {
                id: "shutdown", label: "Shutdown", parameters: []
            }],
        configuration: []
    },
    create: function () {
        return new WindTurbine();
    },
    discovery: function () {
        return new WindTurbineDiscovery();
    }
};

var q = require('q');
var _ = require('lodash');

function WindTurbineDiscovery() {
    WindTurbineDiscovery.prototype.start = function () {

        if (!this.node.isSimulated()) {
            // TODO For now, need to be able to switch for Discovery or inherit from Device
            this.logLevel = "debug";
            this.scanForCameras();
            this.discoveryInterval = setInterval(this.scanForProbe.bind(this), 30000);
        }
    };

    WindTurbineDiscovery.prototype.stop = function () {
        if (discoveryInterval !== undefined && discoveryInterval) {
            clearInterval(discoveryInterval);
        }
    };

    WindTurbineDiscovery.prototype.scanForProbe = function () {
    };
}

/**
 *
 * @constructor
 */
function WindTurbine() {
    WindTurbine.prototype.start = function () {
        var deferred = q.defer();

        this.state = {};

        if (this.isSimulated()) {
            this.interval = setInterval(function () {
                this.state.windSpeed = 8 + 0.4 * new Date().getTime() % 2;
                this.state.windDirection = new Date().getTime() % 360;
                this.state.nacelleDirection = new Date().getTime() % 360;

                if (this.state.running) {
                    this.state.power = 10 + 0.1 * new Date().getTime() % 2;
                    this.state.idlePower = 0.1 * this.state.power;
                    this.state.rotorSpeed = 5 + 0.1 * new Date().getTime() % 2;
                    this.state.rotorBladeAngle = 10 - new Date().getTime() % 20;
                } else {
                    this.state.power = 0;
                    this.state.idlePower = 0;
                    this.state.rotorSpeed = 0;
                    this.state.rotorBladeAngle = 40;
                }

                this.state.aircraftWarningMarker = new Date().getTime() % 2 == 0;
                this.state.rotorDeIcing = new Date().getTime() % 2 == 0;

                this.publishStateChange();
            }.bind(this), 10000);

            this.statusChangeInterval = setInterval(function () {
                if (new Date().getTime() % 2) {
                    this.publishEvent('6.1', {details: 'Lubricant empty'});
                } else {
                    this.publishEvent('11.2', {details: 'Nacelle iced'});
                }
            }.bind(this), 20000);

            deferred.resolve();
        } else {

            deferred.resolve();
        }

        return deferred.promise;
    };

    /**
     *
     */
    WindTurbine.prototype.stop = function () {
        var deferred = q.defer();

        if (this.isSimulated()) {
            if (this.interval) {
                clearInterval(this.interval);
            }
            else if (this.statusChangeInterval) {
                clearInterval(this.statusChangeInterval);
            }
        } else {
        }

        deferred.resolve();

        return deferred.promise;
    };

    /**
     *
     */
    WindTurbine.prototype.shutdown = function () {
        this.state.running = false;
        this.state.power = 0;
        this.state.idlePower = 0;
        this.state.rotorSpeed = 0;
        this.state.rotorBladeAngle = 40;
    };

    /**
     *
     */
    WindTurbine.prototype.activate = function () {
        this.state.running = true;
        this.state.power = 10 + 0.1 * new Date().getTime() % 2;
        this.state.idlePower = 0.1 * this.state.power;
        this.state.rotorSpeed = 5 + 0.1 * new Date().getTime() % 2;
        this.state.rotorBladeAngle = 10 - new Date().getTime() % 20;
    };

    /**
     *
     */
    WindTurbine.prototype.getState = function () {
        return this.state;
    };

    /**
     *
     */
    WindTurbine.prototype.setState = function () {
    };
}

