"use strict";

function EnumValue(_id,_name) {
    this._name = _name;
    this._id = _id;

    EnumValue.prototype.getName = function() {
        return this._name;
    }
    EnumValue.prototype.getId = function() {
        return this._id;
    };
};


var allEnumerations = {
    AbortReason: {
        0: new EnumValue(0, "other"),
        1: new EnumValue(1, "bufferOverflow"),
        2: new EnumValue(2, "invalidApduInThisState"),
        3: new EnumValue(3, "preemptedByHigherPriorityTask"),
        4: new EnumValue(4, "segmentationNotSupported")
    },
    AccessAuthenticationFactorDisable: {
        0: new EnumValue(0, "none"),
        1: new EnumValue(1, "disabled"),
        2: new EnumValue(2, "disabledLost"),
        3: new EnumValue(3, "disabledStolen"),
        4: new EnumValue(4, "disabledDamaged"),
        5: new EnumValue(5, "disabledDestroyed")
    },
    AccessCredentialDisable: {
        0: new EnumValue(0, "none"),
        1: new EnumValue(1, "disable"),
        2: new EnumValue(2, "disableManual"),
        3: new EnumValue(3, "disableLockout")
    },
    AccessCredentialDisableReason: {
        0: new EnumValue(0, "disabled"),
        1: new EnumValue(1, "disabledNeedsProvisioning"),
        2: new EnumValue(2, "disabledUnassigned"),
        3: new EnumValue(3, "disabledNotYetActive"),
        4: new EnumValue(4, "disabledExpired"),
        5: new EnumValue(5, "disabledLockout"),
        6: new EnumValue(6, "disabledMaxDays"),
        7: new EnumValue(7, "disabledMaxUses"),
        8: new EnumValue(8, "disabledInactivity"),
        9: new EnumValue(9, "disabledManual")
    },
    AccessEvent: {
        0: new EnumValue(0, "none"),
        1: new EnumValue(1, "granted"),
        2: new EnumValue(2, "muster"),
        3: new EnumValue(3, "passbackDetected"),
        4: new EnumValue(4, "duress"),
        5: new EnumValue(5, "trace"),
        6: new EnumValue(6, "lockoutMaxAttempts"),
        7: new EnumValue(7, "lockoutOther"),
        8: new EnumValue(8, "lockoutRelinquished"),
        9: new EnumValue(9, "lockedByHigherPriority"),
        10: new EnumValue(10, "outOfService"),
        11: new EnumValue(11, "outOfServiceRelinquished"),
        12: new EnumValue(12, "accompanimentBy"),
        13: new EnumValue(13, "authenticationFactorRead"),
        14: new EnumValue(14, "authorizationDelayed"),
        15: new EnumValue(15, "verificationRequired"),
        16: new EnumValue(16, "noEntryAfterGrant"),
        128: new EnumValue(128, "deniedDenyAll"),
        129: new EnumValue(129, "deniedUnknownCredential"),
        130: new EnumValue(130, "deniedAuthenticationUnavailable"),
        131: new EnumValue(131, "deniedAuthenticationFactorTimeout"),
        132: new EnumValue(132, "deniedIncorrectAuthenticationFactor"),
        133: new EnumValue(133, "deniedZoneNoAccessRights"),
        134: new EnumValue(134, "deniedPointNoAccessRights"),
        135: new EnumValue(135, "deniedNoAccessRights"),
        136: new EnumValue(136, "deniedOutOfTimeRange"),
        137: new EnumValue(137, "deniedThreatLevel"),
        138: new EnumValue(138, "deniedPassback"),
        139: new EnumValue(139, "deniedUnexpectedLocationUsage"),
        140: new EnumValue(140, "deniedMaxAttempts"),
        141: new EnumValue(141, "deniedLowerOccupancyLimit"),
        142: new EnumValue(142, "deniedUpperOccupancyLimit"),
        143: new EnumValue(143, "deniedAuthenticationFactorLost"),
        144: new EnumValue(144, "deniedAuthenticationFactorStolen"),
        145: new EnumValue(145, "deniedAuthenticationFactorDamaged"),
        146: new EnumValue(146, "deniedAuthenticationFactorDestroyed"),
        147: new EnumValue(147, "deniedAuthenticationFactorDisabled"),
        148: new EnumValue(148, "deniedAuthenticationFactorError"),
        149: new EnumValue(149, "deniedCredentialUnassigned"),
        150: new EnumValue(150, "deniedCredentialNotProvisioned"),
        151: new EnumValue(151, "deniedCredentialNotYetActive"),
        152: new EnumValue(152, "deniedCredentialExpired"),
        153: new EnumValue(153, "deniedCredentialManualDisable"),
        154: new EnumValue(154, "deniedCredentialLockout"),
        155: new EnumValue(155, "deniedCredentialMaxDays"),
        156: new EnumValue(156, "deniedCredentialMaxUses"),
        157: new EnumValue(157, "deniedCredentialInactivity"),
        158: new EnumValue(158, "deniedCredentialDisabled"),
        159: new EnumValue(159, "deniedNoAccompaniment"),
        160: new EnumValue(160, "deniedIncorrectAccompaniment"),
        161: new EnumValue(161, "deniedLockout"),
        162: new EnumValue(162, "deniedVerificationFailed"),
        163: new EnumValue(163, "deniedVerificationTimeout"),
        164: new EnumValue(164, "deniedOther")
    },
    AccessPassbackMode: {
        0: new EnumValue(0, "passbackOff"),
        1: new EnumValue(1, "hardPassback"),
        2: new EnumValue(2, "softPassback")
    },
    AccessUserType: {
        0: new EnumValue(0, "asset"),
        1: new EnumValue(1, "group"),
        2: new EnumValue(2, "person")
    },
    AccessZoneOccupancyState: {
        0: new EnumValue(0, "normal"),          // rba: ATTN: STRANGE VALUES HAVE TO BE CHECKED !!!!
        1: new EnumValue(1, "belowLowerLimit"),
        2: new EnumValue(2, "atLowerLimit"),
        3: new EnumValue(0, "atUpperLimit"),
        4: new EnumValue(1, "aboveUpperLimit"),
        5: new EnumValue(2, "disabled"),
        6: new EnumValue(0, "notSupported")
    },
    Action: {
        0: new EnumValue(0, "direct"),
        1: new EnumValue(1, "reverse")
    },
    AuthenticationFactorType: {
        0: new EnumValue(0, "undefined"),
        1: new EnumValue(1, "error"),
        2: new EnumValue(2, "custom"),
        3: new EnumValue(3, "simpleNumber16"),
        4: new EnumValue(4, "simpleNumber32"),
        5: new EnumValue(5, "simpleNumber56"),
        6: new EnumValue(6, "simpleAlphaNumeric"),
        7: new EnumValue(7, "abaTrack2"),
        8: new EnumValue(8, "wiegand26"),
        9: new EnumValue(9, "wiegand37"),
        10: new EnumValue(10, "wiegand37Facility"),
        11: new EnumValue(11, "facility16Card32"),
        12: new EnumValue(12, "facility32Card32"),
        13: new EnumValue(13, "fascN"),
        14: new EnumValue(14, "fascNBcd"),
        15: new EnumValue(15, "fascNLarge"),
        16: new EnumValue(16, "fascNLargeBcd"),
        17: new EnumValue(17, "gsa75"),
        18: new EnumValue(18, "chuid"),
        19: new EnumValue(19, "chuidFull"),
        20: new EnumValue(20, "guid"),
        22: new EnumValue(22, "cbeffA"),
        23: new EnumValue(23, "cbeffB"),
        24: new EnumValue(24, "cbeffC"),
        25: new EnumValue(25, "userPassword")
    },
    AuthenticationStatus: {
        0: new EnumValue(0, "notReady"),
        1: new EnumValue(1, "ready"),
        2: new EnumValue(2, "disabled"),
        3: new EnumValue(3, "waitingForAuthenticationFactor"),
        4: new EnumValue(4, "waitingForAccompaniment"),
        5: new EnumValue(5, "waitingForVerification"),
        6: new EnumValue(6, "inProgress")
    },
    BackupState: {
        0: new EnumValue(0, "idle"),
        1: new EnumValue(1, "preparingForBackup"),
        2: new EnumValue(2, "preparingForRestore"),
        3: new EnumValue(3, "performingABackup"),
        4: new EnumValue(4, "performingARestore"),
        5: new EnumValue(5, "backupFailure"),
        6: new EnumValue(6, "restoreFailure")
    },
    BinaryPV: {
        0: new EnumValue(0, "inactive"),
        1: new EnumValue(1, "active")
    },
    DeviceStatus: {
        0: new EnumValue(0, "operational"),
        1: new EnumValue(1, "operationalReadOnly"),
        2: new EnumValue(2, "downloadRequired"),
        3: new EnumValue(3, "downloadInProgress"),
        4: new EnumValue(4, "nonOperational"),
        5: new EnumValue(5, "backupInProgress")
    },
    DoorAlarmState: {
        0: new EnumValue(0, "normal"),
        1: new EnumValue(1, "alarm"),
        2: new EnumValue(2, "doorOpenTooLong"),
        3: new EnumValue(3, "forcedOpen"),
        4: new EnumValue(4, "tamper"),
        5: new EnumValue(5, "doorFault"),
        6: new EnumValue(6, "lockDown"),
        7: new EnumValue(7, "freeAccess"),
        8: new EnumValue(8, "egressOpen")
    },
    DoorSecuredStatus: {
        0: new EnumValue(0, "secured"),
        1: new EnumValue(1, "unsecured"),
        2: new EnumValue(2, "unknown")
    },
    DoorStatus: {
        0: new EnumValue(0, "closed"),
        1: new EnumValue(1, "open"),
        2: new EnumValue(2, "unknown")
    },
    DoorValue: {
        0: new EnumValue(0, "lock"),
        1: new EnumValue(1, "unlock"),
        2: new EnumValue(2, "pulseUnlock"),
        3: new EnumValue(3, "extendedPulseUnlock")
    },
    EngineeringUnits: {
        166: new EnumValue(166, "metersPerSecondPerSecond"),
        0: new EnumValue(0, "squareMeters"),
        116: new EnumValue(116, "squareCentimeters"),
        1: new EnumValue(1, "squareFeet"),
        115: new EnumValue(115, "squareInches"),
        105: new EnumValue(105, "currency1"),
        106: new EnumValue(106, "currency2"),
        107: new EnumValue(107, "currency3"),
        108: new EnumValue(108, "currency4"),
        109: new EnumValue(109, "currency5"),
        110: new EnumValue(110, "currency6"),
        111: new EnumValue(111, "currency7"),
        112: new EnumValue(112, "currency8"),
        113: new EnumValue(113, "currency9"),
        114: new EnumValue(114, "currency10"),
        2: new EnumValue(2, "milliamperes"),
        3: new EnumValue(3, "amperes"),
        167: new EnumValue(167, "amperesPerMeter"),
        168: new EnumValue(168, "amperesPerSquareMeter"),
        169: new EnumValue(169, "ampereSquareMeters"),
        170: new EnumValue(170, "farads"),
        171: new EnumValue(171, "henrys"),
        4: new EnumValue(4, "ohms"),
        172: new EnumValue(172, "ohmMeters"),
        145: new EnumValue(145, "milliohms"),
        122: new EnumValue(122, "kilohms"),
        123: new EnumValue(123, "megohms"),
        173: new EnumValue(173, "siemens"), // 1 mho equals 1 siemens
        174: new EnumValue(174, "siemensPerMeter"),
        175: new EnumValue(175, "teslas"),
        5: new EnumValue(5, "volts"),
        124: new EnumValue(124, "millivolts"),
        6: new EnumValue(6, "kilovolts"),
        7: new EnumValue(7, "megavolts"),
        8: new EnumValue(8, "voltAmperes"),
        9: new EnumValue(9, "kilovoltAmperes"),
        10: new EnumValue(10, "megavoltAmperes"),
        11: new EnumValue(11, "voltAmperesReactive"),
        12: new EnumValue(12, "kilovoltAmperesReactive"),
        13: new EnumValue(13, "megavoltAmperesReactive"),
        176: new EnumValue(176, "voltsPerDegreeKelvin"),
        177: new EnumValue(177, "voltsPerMeter"),
        14: new EnumValue(14, "degreesPhase"),
        15: new EnumValue(15, "powerFactor"),
        178: new EnumValue(178, "webers"),
        16: new EnumValue(16, "joules"),
        17: new EnumValue(17, "kilojoules"),
        125: new EnumValue(125, "kilojoulesPerKilogram"),
        126: new EnumValue(126, "megajoules"),
        18: new EnumValue(18, "wattHours"),
        19: new EnumValue(19, "kilowattHours"),
        146: new EnumValue(146, "megawattHours"),
        20: new EnumValue(20, "btus"),
        147: new EnumValue(147, "kiloBtus"),
        148: new EnumValue(148, "megaBtus"),
        21: new EnumValue(21, "therms"),
        22: new EnumValue(22, "tonHours"),
        23: new EnumValue(23, "joulesPerKilogramDryAir"),
        149: new EnumValue(149, "kilojoulesPerKilogramDryAir"),
        150: new EnumValue(150, "megajoulesPerKilogramDryAir"),
        24: new EnumValue(24, "btusPerPoundDryAir"),
        117: new EnumValue(117, "btusPerPound"),
        127: new EnumValue(127, "joulesPerDegreeKelvin"),
        151: new EnumValue(151, "kilojoulesPerDegreeKelvin"),
        152: new EnumValue(152, "megajoulesPerDegreeKelvin"),
        128: new EnumValue(128, "joulesPerKilogramDegreeKelvin"),
        153: new EnumValue(153, "newton"),
        25: new EnumValue(25, "cyclesPerHour"),
        26: new EnumValue(26, "cyclesPerMinute"),
        27: new EnumValue(27, "hertz"),
        129: new EnumValue(129, "kilohertz"),
        130: new EnumValue(130, "megahertz"),
        131: new EnumValue(131, "perHour"),
        28: new EnumValue(28, "gramsOfWaterPerKilogramDryAir"),
        29: new EnumValue(29, "percentRelativeHumidity"),
        30: new EnumValue(30, "millimeters"),
        118: new EnumValue(118, "centimeters"),
        31: new EnumValue(31, "meters"),
        32: new EnumValue(32, "inches"),
        33: new EnumValue(33, "feet"),
        179: new EnumValue(179, "candelas"),
        180: new EnumValue(180, "candelasPerSquareMeter"),
        34: new EnumValue(34, "wattsPerSquareFoot"),
        35: new EnumValue(35, "wattsPerSquareMeter"),
        36: new EnumValue(36, "lumens"),
        37: new EnumValue(37, "luxes"),
        38: new EnumValue(38, "footCandles"),
        39: new EnumValue(39, "kilograms"),
        40: new EnumValue(40, "poundsMass"),
        41: new EnumValue(41, "tons"),
        154: new EnumValue(154, "gramsPerSecond"),
        155: new EnumValue(155, "gramsPerMinute"),
        42: new EnumValue(42, "kilogramsPerSecond"),
        43: new EnumValue(43, "kilogramsPerMinute"),
        44: new EnumValue(44, "kilogramsPerHour"),
        119: new EnumValue(119, "poundsMassPerSecond"),
        45: new EnumValue(45, "poundsMassPerMinute"),
        46: new EnumValue(46, "poundsMassPerHour"),
        156: new EnumValue(156, "tonsPerHour"),
        132: new EnumValue(132, "milliwatts"),
        47: new EnumValue(47, "watts"),
        48: new EnumValue(48, "kilowatts"),
        49: new EnumValue(49, "megawatts"),
        50: new EnumValue(50, "btusPerHour"),
        157: new EnumValue(157, "kiloBtusPerHour"),
        51: new EnumValue(51, "horsepower"),
        52: new EnumValue(52, "tonsRefrigeration"),
        53: new EnumValue(53, "pascals"),
        133: new EnumValue(133, "hectopascals"),
        54: new EnumValue(54, "kilopascals"),
        134: new EnumValue(134, "millibars"),
        55: new EnumValue(55, "bars"),
        56: new EnumValue(56, "poundsForcePerSquareInch"),
        57: new EnumValue(57, "centimetersOfWater"),
        58: new EnumValue(58, "inchesOfWater"),
        59: new EnumValue(59, "millimetersOfMercury"),
        60: new EnumValue(60, "centimetersOfMercury"),
        61: new EnumValue(61, "inchesOfMercury"),
        62: new EnumValue(62, "degreesCelsius"),
        63: new EnumValue(63, "degreesKelvin"),
        181: new EnumValue(181, "degreesKelvinPerHour"),
        182: new EnumValue(182, "degreesKelvinPerMinute"),
        64: new EnumValue(64, "degreesFahrenheit"),
        65: new EnumValue(65, "degreeDaysCelsius"),
        66: new EnumValue(66, "degreeDaysFahrenheit"),
        120: new EnumValue(120, "deltaDegreesFahrenheit"),
        121: new EnumValue(121, "deltaDegreesKelvin"),
        67: new EnumValue(67, "years"),
        68: new EnumValue(68, "months"),
        69: new EnumValue(69, "weeks"),
        70: new EnumValue(70, "days"),
        71: new EnumValue(71, "hours"),
        72: new EnumValue(72, "minutes"),
        73: new EnumValue(73, "seconds"),
        158: new EnumValue(158, "hundredthsSeconds"),
        159: new EnumValue(159, "milliseconds"),
        160: new EnumValue(160, "newtonMeters"),
        161: new EnumValue(161, "millimetersPerSecond"),
        162: new EnumValue(162, "millimetersPerMinute"),
        74: new EnumValue(74, "metersPerSecond"),
        163: new EnumValue(163, "metersPerMinute"),
        164: new EnumValue(164, "metersPerHour"),
        75: new EnumValue(75, "kilometersPerHour"),
        76: new EnumValue(76, "feetPerSecond"),
        77: new EnumValue(77, "feetPerMinute"),
        78: new EnumValue(78, "milesPerHour"),
        79: new EnumValue(79, "cubicFeet"),
        80: new EnumValue(80, "cubicMeters"),
        81: new EnumValue(81, "imperialGallons"),
        82: new EnumValue(82, "liters"),
        83: new EnumValue(83, "usGallons"),
        142: new EnumValue(142, "cubicFeetPerSecond"),
        84: new EnumValue(84, "cubicFeetPerMinute"),
        85: new EnumValue(85, "cubicMetersPerSecond"),
        165: new EnumValue(165, "cubicMetersPerMinute"),
        135: new EnumValue(135, "cubicMetersPerHour"),
        86: new EnumValue(86, "imperialGallonsPerMinute"),
        87: new EnumValue(87, "litersPerSecond"),
        88: new EnumValue(88, "litersPerMinute"),
        136: new EnumValue(136, "litersPerHour"),
        89: new EnumValue(89, "usGallonsPerMinute"),
        90: new EnumValue(90, "degreesAngular"),
        91: new EnumValue(91, "degreesCelsiusPerHour"),
        92: new EnumValue(92, "degreesCelsiusPerMinute"),
        93: new EnumValue(93, "degreesFahrenheitPerHour"),
        94: new EnumValue(94, "degreesFahrenheitPerMinute"),
        183: new EnumValue(183, "jouleSeconds"),
        186: new EnumValue(186, "kilogramsPerCubicMeter"),
        137: new EnumValue(137, "kilowattHoursPerSquareMeter"),
        138: new EnumValue(138, "kilowattHoursPerSquareFoot"),
        139: new EnumValue(139, "megajoulesPerSquareMeter"),
        140: new EnumValue(140, "megajoulesPerSquareFoot"),
        95: new EnumValue(95, "noUnits"),
        187: new EnumValue(187, "newtonSeconds"),
        188: new EnumValue(188, "newtonsPerMeter"),
        96: new EnumValue(96, "partsPerMillion"),
        97: new EnumValue(97, "partsPerBillion"),
        98: new EnumValue(98, "percent"),
        143: new EnumValue(143, "percentObscurationPerFoot"),
        144: new EnumValue(144, "percentObscurationPerMeter"),
        99: new EnumValue(99, "percentPerSecond"),
        100: new EnumValue(100, "perMinute"),
        101: new EnumValue(101, "perSecond"),
        102: new EnumValue(102, "psiPerDegreeFahrenheit"),
        103: new EnumValue(103, "radians"),
        184: new EnumValue(184, "radiansPerSecond"),
        104: new EnumValue(104, "revolutionsPerMinute"),
        185: new EnumValue(185, "squareMetersPerNewton"),
        189: new EnumValue(189, "wattsPerMeterPerDegreeKelvin"),
        141: new EnumValue(141, "wattsPerSquareMeterDegreeKelvin")
    },
    ErrorClass: {
        0: new EnumValue(0, "device"),
        1: new EnumValue(1, "object"),
        2: new EnumValue(2, "property"),
        3: new EnumValue(3, "resources"),
        4: new EnumValue(4, "security"),
        5: new EnumValue(5, "services"),
        6: new EnumValue(6, "vt"),
        7: new EnumValue(7, "communication")
    },
    ErrorCode: {
        0: new EnumValue(0, "other"),
        2: new EnumValue(2, "configurationInProgress"),
        3: new EnumValue(3, "deviceBusy"),
        4: new EnumValue(4, "dynamicCreationNotSupported"),
        5: new EnumValue(5, "fileAccessDenied"),
        7: new EnumValue(7, "inconsistentParameters"),
        8: new EnumValue(8, "inconsistentSelectionCriterion"),
        9: new EnumValue(9, "invalidDataType"),
        10: new EnumValue(10, "invalidFileAccessMethod"),
        11: new EnumValue(11, "invalidFileStartPosition"),
        13: new EnumValue(13, "invalidParameterDataType"),
        14: new EnumValue(14, "invalidTimeStamp"),
        16: new EnumValue(16, "missingRequiredParameter"),
        17: new EnumValue(17, "noObjectsOfSpecifiedType"),
        18: new EnumValue(18, "noSpaceForObject"),
        19: new EnumValue(19, "noSpaceToAddListElement"),
        20: new EnumValue(20, "noSpaceToWriteProperty"),
        21: new EnumValue(21, "noVtSessionsAvailable"),
        22: new EnumValue(22, "propertyIsNotAList"),
        23: new EnumValue(23, "objectDeletionNotPermitted"),
        24: new EnumValue(24, "objectIdentifierAlreadyExists"),
        25: new EnumValue(25, "operationalProblem"),
        26: new EnumValue(26, "passwordFailure"),
        27: new EnumValue(27, "readAccessDenied"),
        29: new EnumValue(29, "serviceRequestDenied"),
        30: new EnumValue(30, "timeout"),
        31: new EnumValue(31, "unknownObject"),
        32: new EnumValue(32, "unknownProperty"),
        34: new EnumValue(34, "unknownVtClass"),
        35: new EnumValue(35, "unknownVtSession"),
        36: new EnumValue(36, "unsupportedObjectType"),
        37: new EnumValue(37, "valueOutOfRange"),
        38: new EnumValue(38, "vtSessionAlreadyClosed"),
        39: new EnumValue(39, "vtSessionTerminationFailure"),
        40: new EnumValue(40, "writeAccessDenied"),
        41: new EnumValue(41, "characterSetNotSupported"),
        42: new EnumValue(42, "invalidArrayIndex"),
        43: new EnumValue(43, "covSubscriptionFailed"),
        44: new EnumValue(44, "notCovProperty"),
        45: new EnumValue(45, "optionalFunctionalityNotSupported"),
        46: new EnumValue(46, "invalidConfigurationData"),
        47: new EnumValue(47, "datatypeNotSupported"),
        48: new EnumValue(48, "duplicateName"),
        49: new EnumValue(49, "duplicateObjectId"),
        50: new EnumValue(50, "propertyIsNotAnArray"),
        51: new EnumValue(51, "abortBufferOverflow"),
        52: new EnumValue(52, "abortInvalidApduInThisState"),
        53: new EnumValue(53, "abortPreemptedByHigherPriorityTask"),
        54: new EnumValue(54, "abortSegmentationNotSupported"),
        55: new EnumValue(55, "abortProprietary"),
        56: new EnumValue(56, "abortOther"),
        57: new EnumValue(57, "invalidTag"),
        58: new EnumValue(58, "networkDown"),
        59: new EnumValue(59, "rejectBufferOverflow"),
        60: new EnumValue(60, "rejectInconsistentParameters"),
        61: new EnumValue(61, "rejectInvalidParameterDataType"),
        62: new EnumValue(62, "rejectInvalidTag"),
        63: new EnumValue(63, "rejectMissingRequiredParameter"),
        64: new EnumValue(64, "rejectParameterOutOfRange"),
        65: new EnumValue(65, "rejectTooManyArguments"),
        66: new EnumValue(66, "rejectUndefinedEnumeration"),
        67: new EnumValue(67, "rejectUnrecognizedService"),
        68: new EnumValue(68, "rejectProprietary"),
        69: new EnumValue(69, "rejectOther"),
        70: new EnumValue(70, "unknownDevice"),
        71: new EnumValue(71, "unknownRoute"),
        72: new EnumValue(72, "valueNotInitialized"),
        73: new EnumValue(73, "invalidEventState"),
        74: new EnumValue(74, "noAlarmConfigured"),
        75: new EnumValue(75, "logBufferFull"),
        76: new EnumValue(76, "loggedValuePurged"),
        77: new EnumValue(77, "noPropertySpecified"),
        78: new EnumValue(78, "notConfiguredForTriggeredLogging"),
        79: new EnumValue(79, "unknownSubscription"),
        80: new EnumValue(80, "parameterOutOfRange"),
        81: new EnumValue(81, "listElementNotFound"),
        82: new EnumValue(82, "busy"),
        83: new EnumValue(83, "communicationDisabled"),
        84: new EnumValue(84, "success"),
        85: new EnumValue(85, "accessDenied"),
        86: new EnumValue(86, "badDestinationAddress"),
        87: new EnumValue(87, "badDestinationDeviceId"),
        88: new EnumValue(88, "badSignature"),
        89: new EnumValue(89, "badSourceAddress"),
        90: new EnumValue(90, "badTimestamp"),
        91: new EnumValue(91, "cannotUseKey"),
        92: new EnumValue(92, "cannotVerifyMessageId"),
        93: new EnumValue(93, "correctKeyRevision"),
        94: new EnumValue(94, "destinationDeviceIdRequired"),
        95: new EnumValue(95, "duplicateMessage"),
        96: new EnumValue(96, "encryptionNotConfigured"),
        97: new EnumValue(97, "encryptionRequired"),
        98: new EnumValue(98, "incorrectKey"),
        99: new EnumValue(99, "invalidKeyData"),
        100: new EnumValue(100, "keyUpdateInProgress"),
        101: new EnumValue(101, "malformedMessage"),
        102: new EnumValue(102, "notKeyServer"),
        103: new EnumValue(103, "securityNotConfigured"),
        104: new EnumValue(104, "sourceSecurityRequired"),
        105: new EnumValue(105, "tooManyKeys"),
        106: new EnumValue(106, "unknownAuthenticationType"),
        107: new EnumValue(107, "unknownKey"),
        108: new EnumValue(108, "unknownKeyRevision"),
        109: new EnumValue(109, "unknownSourceMessage"),
        110: new EnumValue(110, "notRouterToDnet"),
        111: new EnumValue(111, "routerBusy"),
        112: new EnumValue(112, "unknownNetworkMessage"),
        113: new EnumValue(113, "messageTooLong"),
        114: new EnumValue(114, "securityError"),
        115: new EnumValue(115, "addressingError"),
        116: new EnumValue(116, "writeBdtFailed"),
        117: new EnumValue(117, "readBdtFailed"),
        118: new EnumValue(118, "registerForeignDeviceFailed"),
        119: new EnumValue(119, "readFdtFailed"),
        120: new EnumValue(120, "deleteFdtEntryFailed"),
        121: new EnumValue(121, "distributeBroadcastFailed"),
        122: new EnumValue(122, "unknownFileSize"),
        123: new EnumValue(123, "abortApduTooLong"),
        124: new EnumValue(124, "abortApplicationExceededReplyTime"),
        125: new EnumValue(125, "abortOutOfResources"),
        126: new EnumValue(126, "abortTsmTimeout"),
        127: new EnumValue(127, "abortWindowSizeOutOfRange"),
        128: new EnumValue(128, "fileFull"),
        129: new EnumValue(129, "inconsistentConfiguration"),
        130: new EnumValue(130, "inconsistentObjectType"),
        131: new EnumValue(131, "internalError"),
        132: new EnumValue(132, "notConfigured"),
        133: new EnumValue(133, "outOfMemory"),
        134: new EnumValue(134, "valueTooLong"),
        135: new EnumValue(135, "abortInsufficientSecurity"),
        136: new EnumValue(136, "abortSecurityError")
    },
    EventState: {
        0: new EnumValue(0, "normal"),
        1: new EnumValue(1, "fault"),
        2: new EnumValue(2, "offnormal"),
        3: new EnumValue(3, "highLimit"),
        4: new EnumValue(4, "lowLimit"),
        5: new EnumValue(5, "lifeSafetyAlarm")
    },
    EventType: {
        0: new EnumValue(0, "changeOfBitstring"),
        1: new EnumValue(1, "changeOfState"),
        2: new EnumValue(2, "changeOfValue"),
        3: new EnumValue(3, "commandFailure"),
        4: new EnumValue(4, "floatingLimit"),
        5: new EnumValue(5, "outOfRange"),
        8: new EnumValue(8, "changeOfLifeSafety"),
        9: new EnumValue(9, "extended"),
        10: new EnumValue(10, "bufferReady"),
        11: new EnumValue(11, "unsignedRange"),
        13: new EnumValue(13, "accessEvent"),
        14: new EnumValue(14, "doubleOutOfRange"),
        15: new EnumValue(15, "signedOutOfRange"),
        16: new EnumValue(16, "unsignedOutOfRange"),
        17: new EnumValue(17, "changeOfCharacterstring"),
        18: new EnumValue(18, "changeOfStatusFlags"),
        19: new EnumValue(19, "changeOfReliability"),
        20: new EnumValue(20, "none")
    },
    FileAccessMethod: {
        0: new EnumValue(0, "recordAccess"),
        1: new EnumValue(1, "streamAccess")
    },
    LifeSafetyMode: {
        0: new EnumValue(0, "off"),
        1: new EnumValue(1, "on"),
        2: new EnumValue(2, "test"),
        3: new EnumValue(3, "manned"),
        4: new EnumValue(4, "unmanned"),
        5: new EnumValue(5, "armed"),
        6: new EnumValue(6, "disarmed"),
        7: new EnumValue(7, "prearmed"),
        8: new EnumValue(8, "slow"),
        9: new EnumValue(9, "fast"),
        10: new EnumValue(10, "disconnected"),
        11: new EnumValue(11, "enabled"),
        12: new EnumValue(12, "disabled"),
        13: new EnumValue(13, "automaticReleaseDisabled"),
        14: new EnumValue(14, "defaultMode")
    },
    LifeSafetyOperation: {
        0: new EnumValue(0, "none"),
        1: new EnumValue(1, "silence"),
        2: new EnumValue(2, "silenceAudible"),
        3: new EnumValue(3, "silenceVisual"),
        4: new EnumValue(4, "reset"),
        5: new EnumValue(5, "resetAlarm"),
        6: new EnumValue(6, "resetFault"),
        7: new EnumValue(7, "unsilence"),
        8: new EnumValue(8, "unsilenceAudible"),
        9: new EnumValue(9, "unsilenceVisual")
    },
    LifeSafetyState: {
        0: new EnumValue(0, "quiet"),
        1: new EnumValue(1, "preAlarm"),
        2: new EnumValue(2, "alarm"),
        3: new EnumValue(3, "fault"),
        4: new EnumValue(4, "faultPreAlarm"),
        5: new EnumValue(5, "faultAlarm"),
        6: new EnumValue(6, "notReady"),
        7: new EnumValue(7, "active"),
        8: new EnumValue(8, "tamper"),
        9: new EnumValue(9, "testAlarm"),
        10: new EnumValue(10, "testActive"),
        11: new EnumValue(11, "testFault"),
        12: new EnumValue(12, "testFaultAlarm"),
        13: new EnumValue(13, "holdup"),
        14: new EnumValue(14, "duress"),
        15: new EnumValue(15, "tamperAlarm"),
        16: new EnumValue(16, "abnormal"),
        17: new EnumValue(17, "emergencyPower"),
        18: new EnumValue(18, "delayed"),
        19: new EnumValue(19, "blocked"),
        20: new EnumValue(20, "localAlarm"),
        21: new EnumValue(21, "generalAlarm"),
        22: new EnumValue(22, "supervisory"),
        23: new EnumValue(23, "testSupervisory")
    },
    LightingInProgress: {
        0: new EnumValue(0, "idle"),
        1: new EnumValue(1, "fadeActive"),
        2: new EnumValue(2, "rampActive"),
        3: new EnumValue(3, "notControlled"),
        4: new EnumValue(4, "other")
    },
    LightingOperation: {
        0: new EnumValue(0, "none"),
        1: new EnumValue(1, "fadeTo"),
        2: new EnumValue(2, "rampTo"),
        3: new EnumValue(3, "stepUp"),
        4: new EnumValue(4, "stepDown"),
        5: new EnumValue(5, "stepOn"),
        6: new EnumValue(6, "stepOff"),
        7: new EnumValue(7, "warn"),
        8: new EnumValue(8, "warnOff"),
        9: new EnumValue(9, "warnRelinquish"),
        10: new EnumValue(10, "stop")
    },
    LightingTransition: {
        0: new EnumValue(0, "none"),
        1: new EnumValue(1, "fade"),
        2: new EnumValue(2, "ramp")
    },
    LockStatus: {
        0: new EnumValue(0, "locked"),
        1: new EnumValue(1, "unlocked"),
        2: new EnumValue(2, "fault"),
        3: new EnumValue(3, "unknown")
    },
    LoggingType: {
        0: new EnumValue(0, "polled"),
        1: new EnumValue(1, "cov"),
        2: new EnumValue(2, "triggered")
    },
    Maintenance: {
        0: new EnumValue(0, "none"),
        1: new EnumValue(1, "periodicTest"),
        2: new EnumValue(2, "needServiceOperational"),
        3: new EnumValue(3, "needServiceInoperative")
    },
    MessagePriority: {
        0: new EnumValue(0, "normal"),
        1: new EnumValue(1, "urgent")
    },
    NodeType: {
        0: new EnumValue(0, "unknown"),
        1: new EnumValue(1, "system"),
        2: new EnumValue(2, "network"),
        3: new EnumValue(3, "device"),
        4: new EnumValue(4, "organizational"),
        5: new EnumValue(5, "area"),
        6: new EnumValue(6, "equipment"),
        7: new EnumValue(7, "point"),
        8: new EnumValue(8, "collection"),
        9: new EnumValue(9, "property"),
        10: new EnumValue(10, "functional"),
        11: new EnumValue(11, "other")
    },
    NotifyType: {
        0: new EnumValue(0, "alarm"),
        1: new EnumValue(1, "event"),
        2: new EnumValue(2, "ackNotification")
    },
    ObjectType: {
        0: new EnumValue(0, "analogInput"),
        1: new EnumValue(1, "analogOutput"),
        2: new EnumValue(2, "analogValue"),
        3: new EnumValue(3, "binaryInput"),
        4: new EnumValue(4, "binaryOutput"),
        5: new EnumValue(5, "binaryValue"),
        6: new EnumValue(6, "calendar"),
        7: new EnumValue(7, "command"),
        8: new EnumValue(8, "device"),
        9: new EnumValue(9, "eventEnrollment"),
        10: new EnumValue(10, "file"),
        11: new EnumValue(11, "group"),
        12: new EnumValue(12, "loop"),
        13: new EnumValue(13, "multiStateInput"),
        14: new EnumValue(14, "multiStateOutput"),
        15: new EnumValue(15, "notificationClass"),
        16: new EnumValue(16, "program"),
        17: new EnumValue(17, "schedule"),
        18: new EnumValue(18, "averaging"),
        19: new EnumValue(19, "multiStateValue"),
        20: new EnumValue(20, "trendLog"),
        21: new EnumValue(21, "lifeSafetyPoint"),
        22: new EnumValue(22, "lifeSafetyZone"),
        23: new EnumValue(23, "accumulator"),
        24: new EnumValue(24, "pulseConverter"),
        25: new EnumValue(25, "eventLog"),
        27: new EnumValue(27, "trendLogMultiple"),
        28: new EnumValue(28, "loadControl"),
        29: new EnumValue(29, "structuredView"),
        30: new EnumValue(30, "accessDoor")
    },
    Polarity: {
        0: new EnumValue(0, "normal"),
        1: new EnumValue(1, "reverse")
    },
    ProgramError: {
        0: new EnumValue(0, "normal"),
        1: new EnumValue(1, "loadFailed"),
        2: new EnumValue(2, "internal"),
        3: new EnumValue(3, "program"),
        4: new EnumValue(4, "other")
    },
    ProgramRequest: {
        0: new EnumValue(0, "ready"),
        1: new EnumValue(1, "load"),
        2: new EnumValue(2, "run"),
        3: new EnumValue(3, "halt"),
        4: new EnumValue(4, "restart"),
        5: new EnumValue(5, "unload")
    },
    ProgramState: {
        0: new EnumValue(0, "idle"),
        1: new EnumValue(1, "loading"),
        2: new EnumValue(2, "running"),
        3: new EnumValue(3, "waiting"),
        4: new EnumValue(4, "halted"),
        5: new EnumValue(5, "unloading")
    },
    PropertyIdentifier: {
        0: new EnumValue(0, "ackedTransitions"),
        1: new EnumValue(1, "ackRequired"),
        2: new EnumValue(2, "action"),
        3: new EnumValue(3, "actionText"),
        4: new EnumValue(4, "activeText"),
        5: new EnumValue(5, "activeVtSessions"),
        6: new EnumValue(6, "alarmValue"),
        7: new EnumValue(7, "alarmValues"),
        8: new EnumValue(8, "all"),
        9: new EnumValue(9, "allWritesSuccessful"),
        10: new EnumValue(10, "apduSegmentTimeout"),
        11: new EnumValue(11, "apduTimeout"),
        12: new EnumValue(12, "applicationSoftwareVersion"),
        13: new EnumValue(13, "archive"),
        14: new EnumValue(14, "bias"),
        15: new EnumValue(15, "changeOfStateCount"),
        16: new EnumValue(16, "changeOfStateTime"),
        17: new EnumValue(17, "notificationClass"),
        19: new EnumValue(19, "controlledVariableReference"),
        20: new EnumValue(20, "controlledVariableUnits"),
        21: new EnumValue(21, "controlledVariableValue"),
        22: new EnumValue(22, "covIncrement"),
        23: new EnumValue(23, "dateList"),
        24: new EnumValue(24, "daylightSavingsStatus"),
        25: new EnumValue(25, "deadband"),
        26: new EnumValue(26, "derivativeConstant"),
        27: new EnumValue(27, "derivativeConstantUnits"),
        28: new EnumValue(28, "description"),
        29: new EnumValue(29, "descriptionOfHalt"),
        30: new EnumValue(30, "deviceAddressBinding"),
        31: new EnumValue(31, "deviceType"),
        32: new EnumValue(32, "effectivePeriod"),
        33: new EnumValue(33, "elapsedActiveTime"),
        34: new EnumValue(34, "errorLimit"),
        35: new EnumValue(35, "eventEnable"),
        36: new EnumValue(36, "eventState"),
        37: new EnumValue(37, "eventType"),
        38: new EnumValue(38, "exceptionSchedule"),
        39: new EnumValue(39, "faultValues"),
        40: new EnumValue(40, "feedbackValue"),
        41: new EnumValue(41, "fileAccessMethod"),
        42: new EnumValue(42, "fileSize"),
        43: new EnumValue(43, "fileType"),
        44: new EnumValue(44, "firmwareRevision"),
        45: new EnumValue(45, "highLimit"),
        46: new EnumValue(46, "inactiveText"),
        47: new EnumValue(47, "inProcess"),
        48: new EnumValue(48, "instanceOf"),
        49: new EnumValue(49, "integralConstant"),
        50: new EnumValue(50, "integralConstantUnits"),
        52: new EnumValue(52, "limitEnable"),
        53: new EnumValue(53, "listOfGroupMembers"),
        54: new EnumValue(54, "listOfObjectPropertyReferences"),
        56: new EnumValue(56, "localDate"),
        57: new EnumValue(57, "localTime"),
        58: new EnumValue(58, "location"),
        59: new EnumValue(59, "lowLimit"),
        60: new EnumValue(60, "manipulatedVariableReference"),
        61: new EnumValue(61, "maximumOutput"),
        62: new EnumValue(62, "maxApduLengthAccepted"),
        63: new EnumValue(63, "maxInfoFrames"),
        64: new EnumValue(64, "maxMaster"),
        65: new EnumValue(65, "maxPresValue"),
        66: new EnumValue(66, "minimumOffTime"),
        67: new EnumValue(67, "minimumOnTime"),
        68: new EnumValue(68, "minimumOutput"),
        69: new EnumValue(69, "minPresValue"),
        70: new EnumValue(70, "modelName"),
        71: new EnumValue(71, "modificationDate"),
        72: new EnumValue(72, "notifyType"),
        73: new EnumValue(73, "numberOfApduRetries"),
        74: new EnumValue(74, "numberOfStates"),
        75: new EnumValue(75, "objectIdentifier"),
        76: new EnumValue(76, "objectList"),
        77: new EnumValue(77, "objectName"),
        78: new EnumValue(78, "objectPropertyReference"),
        79: new EnumValue(79, "objectType"),
        80: new EnumValue(80, "optional"),
        81: new EnumValue(81, "outOfService"),
        82: new EnumValue(82, "outputUnits"),
        83: new EnumValue(83, "eventParameters"),
        84: new EnumValue(84, "polarity"),
        85: new EnumValue(85, "presentValue"),
        86: new EnumValue(86, "priority"),
        87: new EnumValue(87, "priorityArray"),
        88: new EnumValue(88, "priorityForWriting"),
        89: new EnumValue(89, "processIdentifier"),
        90: new EnumValue(90, "programChange"),
        91: new EnumValue(91, "programLocation"),
        92: new EnumValue(92, "programState"),
        93: new EnumValue(93, "proportionalConstant"),
        94: new EnumValue(94, "proportionalConstantUnits"),
        96: new EnumValue(96, "protocolObjectTypesSupported"),
        97: new EnumValue(97, "protocolServicesSupported"),
        98: new EnumValue(98, "protocolVersion"),
        99: new EnumValue(99, "readOnly"),
        100: new EnumValue(100, "reasonForHalt"),
        102: new EnumValue(102, "recipientList"),
        103: new EnumValue(103, "reliability"),
        104: new EnumValue(104, "relinquishDefault"),
        105: new EnumValue(105, "required"),
        106: new EnumValue(106, "resolution"),
        107: new EnumValue(107, "segmentationSupported"),
        108: new EnumValue(108, "setpoint"),
        109: new EnumValue(109, "setpointReference"),
        110: new EnumValue(110, "stateText"),
        111: new EnumValue(111, "statusFlags"),
        112: new EnumValue(112, "systemStatus"),
        113: new EnumValue(113, "timeDelay"),
        114: new EnumValue(114, "timeOfActiveTimeReset"),
        115: new EnumValue(115, "timeOfStateCountReset"),
        116: new EnumValue(116, "timeSynchronizationRecipients"),
        117: new EnumValue(117, "units"),
        118: new EnumValue(118, "updateInterval"),
        119: new EnumValue(119, "utcOffset"),
        120: new EnumValue(120, "vendorIdentifier"),
        121: new EnumValue(121, "vendorName"),
        122: new EnumValue(122, "vtClassesSupported"),
        123: new EnumValue(123, "weeklySchedule"),
        124: new EnumValue(124, "attemptedSamples"),
        125: new EnumValue(125, "averageValue"),
        126: new EnumValue(126, "bufferSize"),
        127: new EnumValue(127, "clientCovIncrement"),
        128: new EnumValue(128, "covResubscriptionInterval"),
        130: new EnumValue(130, "eventTimeStamps"),
        131: new EnumValue(131, "logBuffer"),
        132: new EnumValue(132, "logDeviceObjectProperty"),
        133: new EnumValue(133, "enable"),
        134: new EnumValue(134, "logInterval"),
        135: new EnumValue(135, "maximumValue"),
        136: new EnumValue(136, "minimumValue"),
        137: new EnumValue(137, "notificationThreshold"),
        139: new EnumValue(139, "protocolRevision"),
        140: new EnumValue(140, "recordsSinceNotification"),
        141: new EnumValue(141, "recordCount"),
        142: new EnumValue(142, "startTime"),
        143: new EnumValue(143, "stopTime"),
        144: new EnumValue(144, "stopWhenFull"),
        145: new EnumValue(145, "totalRecordCount"),
        146: new EnumValue(146, "validSamples"),
        147: new EnumValue(147, "windowInterval"),
        148: new EnumValue(148, "windowSamples"),
        149: new EnumValue(149, "maximumValueTimestamp"),
        150: new EnumValue(150, "minimumValueTimestamp"),
        151: new EnumValue(151, "varianceValue"),
        152: new EnumValue(152, "activeCovSubscriptions"),
        153: new EnumValue(153, "backupFailureTimeout"),
        154: new EnumValue(154, "configurationFiles"),
        155: new EnumValue(155, "databaseRevision"),
        156: new EnumValue(156, "directReading"),
        157: new EnumValue(157, "lastRestoreTime"),
        158: new EnumValue(158, "maintenanceRequired"),
        159: new EnumValue(159, "memberOf"),
        160: new EnumValue(160, "mode"),
        161: new EnumValue(161, "operationExpected"),
        162: new EnumValue(162, "setting"),
        163: new EnumValue(163, "silenced"),
        164: new EnumValue(164, "trackingValue"),
        165: new EnumValue(165, "zoneMembers"),
        166: new EnumValue(166, "lifeSafetyAlarmValues"),
        167: new EnumValue(167, "maxSegmentsAccepted"),
        168: new EnumValue(168, "profileName"),
        169: new EnumValue(169, "autoSlaveDiscovery"),
        170: new EnumValue(170, "manualSlaveAddressBinding"),
        171: new EnumValue(171, "slaveAddressBinding"),
        172: new EnumValue(172, "slaveProxyEnable"),
        173: new EnumValue(173, "lastNotifyRecord"),
        174: new EnumValue(174, "scheduleDefault"),
        175: new EnumValue(175, "acceptedModes"),
        176: new EnumValue(176, "adjustValue"),
        177: new EnumValue(177, "count"),
        178: new EnumValue(178, "countBeforeChange"),
        179: new EnumValue(179, "countChangeTime"),
        180: new EnumValue(180, "covPeriod"),
        181: new EnumValue(181, "inputReference"),
        182: new EnumValue(182, "limitMonitoringInterval"),
        183: new EnumValue(183, "loggingObject"),
        184: new EnumValue(184, "loggingRecord"),
        185: new EnumValue(185, "prescale"),
        186: new EnumValue(186, "pulseRate"),
        187: new EnumValue(187, "scale"),
        188: new EnumValue(188, "scaleFactor"),
        189: new EnumValue(189, "updateTime"),
        190: new EnumValue(190, "valueBeforeChange"),
        191: new EnumValue(191, "valueSet"),
        192: new EnumValue(192, "valueChangeTime"),
        193: new EnumValue(193, "alignIntervals"),
        195: new EnumValue(195, "intervalOffset"),
        196: new EnumValue(196, "lastRestartReason"),
        197: new EnumValue(197, "loggingType"),
        202: new EnumValue(202, "restartNotificationRecipients"),
        203: new EnumValue(203, "timeOfDeviceRestart"),
        204: new EnumValue(204, "timeSynchronizationInterval"),
        205: new EnumValue(205, "trigger"),
        206: new EnumValue(206, "utcTimeSynchronizationRecipients"),
        207: new EnumValue(207, "nodeSubtype"),
        208: new EnumValue(208, "nodeType"),
        209: new EnumValue(209, "structuredObjectList"),
        210: new EnumValue(210, "subordinateAnnotations"),
        211: new EnumValue(211, "subordinateList"),
        212: new EnumValue(212, "actualShedLevel"),
        213: new EnumValue(213, "dutyWindow"),
        214: new EnumValue(214, "expectedShedLevel"),
        215: new EnumValue(215, "fullDutyBaseline"),
        218: new EnumValue(218, "requestedShedLevel"),
        219: new EnumValue(219, "shedDuration"),
        220: new EnumValue(220, "shedLevelDescriptions"),
        221: new EnumValue(221, "shedLevels"),
        222: new EnumValue(222, "stateDescription"),
        226: new EnumValue(226, "doorAlarmState"),
        227: new EnumValue(227, "doorExtendedPulseTime"),
        228: new EnumValue(228, "doorMembers"),
        229: new EnumValue(229, "doorOpenTooLongTime"),
        230: new EnumValue(230, "doorPulseTime"),
        231: new EnumValue(231, "doorStatus"),
        232: new EnumValue(232, "doorUnlockDelayTime"),
        233: new EnumValue(233, "lockStatus"),
        234: new EnumValue(234, "maskedAlarmValues"),
        235: new EnumValue(235, "securedStatus"),
        244: new EnumValue(244, "absenteeLimit"),
        245: new EnumValue(245, "accessAlarmEvents"),
        246: new EnumValue(246, "accessDoors"),
        247: new EnumValue(247, "accessEvent"),
        248: new EnumValue(248, "accessEventAuthenticationFactor"),
        249: new EnumValue(249, "accessEventCredential"),
        250: new EnumValue(250, "accessEventTime"),
        251: new EnumValue(251, "accessTransactionEvents"),
        252: new EnumValue(252, "accompaniment"),
        253: new EnumValue(253, "accompanimentTime"),
        254: new EnumValue(254, "activationTime"),
        255: new EnumValue(255, "activeAuthenticationPolicy"),
        256: new EnumValue(256, "assignedAccessRights"),
        257: new EnumValue(257, "authenticationFactors"),
        258: new EnumValue(258, "authenticationPolicyList"),
        259: new EnumValue(259, "authenticationPolicyNames"),
        260: new EnumValue(260, "authenticationStatus"),
        261: new EnumValue(261, "authorizationMode"),
        262: new EnumValue(262, "belongsTo"),
        263: new EnumValue(263, "credentialDisable"),
        264: new EnumValue(264, "credentialStatus"),
        265: new EnumValue(265, "credentials"),
        266: new EnumValue(266, "credentialsInZone"),
        267: new EnumValue(267, "daysRemaining"),
        268: new EnumValue(268, "entryPoints"),
        269: new EnumValue(269, "exitPoints"),
        270: new EnumValue(270, "expiryTime"),
        271: new EnumValue(271, "extendedTimeEnable"),
        272: new EnumValue(272, "failedAttemptEvents"),
        273: new EnumValue(273, "failedAttempts"),
        274: new EnumValue(274, "failedAttemptsTime"),
        275: new EnumValue(275, "lastAccessEvent"),
        276: new EnumValue(276, "lastAccessPoint"),
        277: new EnumValue(277, "lastCredentialAdded"),
        278: new EnumValue(278, "lastCredentialAddedTime"),
        279: new EnumValue(279, "lastCredentialRemoved"),
        280: new EnumValue(280, "lastCredentialRemovedTime"),
        281: new EnumValue(281, "lastUseTime"),
        282: new EnumValue(282, "lockout"),
        283: new EnumValue(283, "lockoutRelinquishTime"),
        285: new EnumValue(285, "maxFailedAttempts"),
        286: new EnumValue(286, "members"),
        287: new EnumValue(287, "musterPoint"),
        288: new EnumValue(288, "negativeAccessRules"),
        289: new EnumValue(289, "numberOfAuthenticationPolicies"),
        290: new EnumValue(290, "occupancyCount"),
        291: new EnumValue(291, "occupancyCountAdjust"),
        292: new EnumValue(292, "occupancyCountEnable"),
        294: new EnumValue(294, "occupancyLowerLimit"),
        295: new EnumValue(295, "occupancyLowerLimitEnforced"),
        296: new EnumValue(296, "occupancyState"),
        297: new EnumValue(297, "occupancyUpperLimit"),
        298: new EnumValue(298, "occupancyUpperLimitEnforced"),
        300: new EnumValue(300, "passbackMode"),
        301: new EnumValue(301, "passbackTimeout"),
        302: new EnumValue(302, "positiveAccessRules"),
        303: new EnumValue(303, "reasonForDisable"),
        304: new EnumValue(304, "supportedFormats"),
        305: new EnumValue(305, "supportedFormatClasses"),
        306: new EnumValue(306, "threatAuthority"),
        307: new EnumValue(307, "threatLevel"),
        308: new EnumValue(308, "traceFlag"),
        309: new EnumValue(309, "transactionNotificationClass"),
        310: new EnumValue(310, "userExternalIdentifier"),
        311: new EnumValue(311, "userInformationReference"),
        317: new EnumValue(317, "userName"),
        318: new EnumValue(318, "userType"),
        319: new EnumValue(319, "usesRemaining"),
        320: new EnumValue(320, "zoneFrom"),
        321: new EnumValue(321, "zoneTo"),
        322: new EnumValue(322, "accessEventTag"),
        323: new EnumValue(323, "globalIdentifier"),
        326: new EnumValue(326, "verificationTime"),
        327: new EnumValue(327, "baseDeviceSecurityPolicy"),
        328: new EnumValue(328, "distributionKeyRevision"),
        329: new EnumValue(329, "doNotHide"),
        330: new EnumValue(330, "keySets"),
        331: new EnumValue(331, "lastKeyServer"),
        332: new EnumValue(332, "networkAccessSecurityPolicies"),
        333: new EnumValue(333, "packetReorderTime"),
        334: new EnumValue(334, "securityPduTimeout"),
        335: new EnumValue(335, "securityTimeWindow"),
        336: new EnumValue(336, "supportedSecurityAlgorithms"),
        337: new EnumValue(337, "updateKeySetTimeout"),
        338: new EnumValue(338, "backupAndRestoreState"),
        339: new EnumValue(339, "backupPreparationTime"),
        340: new EnumValue(340, "restoreCompletionTime"),
        341: new EnumValue(341, "restorePreparationTime"),
        342: new EnumValue(342, "bitMask"),
        343: new EnumValue(343, "bitText"),
        344: new EnumValue(344, "isUtc"),
        345: new EnumValue(345, "groupMembers"),
        346: new EnumValue(346, "groupMemberNames"),
        347: new EnumValue(347, "memberStatusFlags"),
        348: new EnumValue(348, "requestedUpdateInterval"),
        349: new EnumValue(349, "covuPeriod"),
        350: new EnumValue(350, "covuRecipients"),
        351: new EnumValue(351, "eventMessageTexts"),
        352: new EnumValue(352, "eventMessageTextsConfig"),
        353: new EnumValue(353, "eventDetectionEnable"),
        354: new EnumValue(354, "eventAlgorithmInhibit"),
        355: new EnumValue(355, "eventAlgorithmInhibitRef"),
        356: new EnumValue(356, "timeDelayNormal"),
        357: new EnumValue(357, "reliabilityEvaluationInhibit"),
        358: new EnumValue(358, "faultParameters"),
        359: new EnumValue(359, "faultType"),
        360: new EnumValue(360, "localForwardingOnly"),
        361: new EnumValue(361, "processIdentifierFilter"),
        362: new EnumValue(362, "subscribedRecipients"),
        363: new EnumValue(363, "portFilter"),
        364: new EnumValue(364, "authorizationExemptions"),
        365: new EnumValue(365, "allowGroupDelayInhibit"),
        366: new EnumValue(366, "channelNumber"),
        367: new EnumValue(367, "controlGroups"),
        368: new EnumValue(368, "executionDelay"),
        369: new EnumValue(369, "lastPriority"),
        370: new EnumValue(370, "writeStatus"),
        371: new EnumValue(371, "propertyList"),
        372: new EnumValue(372, "serialNumber"),
        373: new EnumValue(373, "blinkWarnEnable"),
        374: new EnumValue(374, "defaultFadeTime"),
        375: new EnumValue(375, "defaultRampRate"),
        376: new EnumValue(376, "defaultStepIncrement"),
        377: new EnumValue(377, "egressTime"),
        378: new EnumValue(378, "inProgress"),
        379: new EnumValue(379, "instantaneousPower"),
        380: new EnumValue(380, "lightingCommand"),
        381: new EnumValue(381, "lightingCommandDefaultPriority"),
        382: new EnumValue(382, "maxActualValue"),
        383: new EnumValue(383, "minActualValue"),
        384: new EnumValue(384, "power"),
        385: new EnumValue(385, "transition"),
        386: new EnumValue(386, "egressActive")
    },
    RejectReason: {
        0: new EnumValue(0, "other"),
        1: new EnumValue(1, "bufferOverflow"),
        2: new EnumValue(2, "inconsistentParameters"),
        3: new EnumValue(3, "invalidParameterDataType"),
        4: new EnumValue(4, "invalidTag"),
        5: new EnumValue(5, "missingRequiredParameter"),
        6: new EnumValue(6, "parameterOutOfRange"),
        7: new EnumValue(7, "tooManyArguments"),
        8: new EnumValue(8, "undefinedEnumeration"),
        9: new EnumValue(9, "unrecognizedService")
    },
    Reliability: {
        0: new EnumValue(0, "noFaultDetected"),
        1: new EnumValue(1, "noSensor"),
        2: new EnumValue(2, "overRange"),
        3: new EnumValue(3, "underRange"),
        4: new EnumValue(4, "openLoop"),
        5: new EnumValue(5, "shortedLoop"),
        6: new EnumValue(6, "noOutput"),
        7: new EnumValue(7, "unreliableOther"),
        8: new EnumValue(8, "processError"),
        9: new EnumValue(9, "multiStateFault"),
        10: new EnumValue(10, "configurationError"),
        12: new EnumValue(12, "communicationFailure"),
        13: new EnumValue(13, "memberFault"),
        14: new EnumValue(14, "monitoredObjectFault"),
        15: new EnumValue(15, "tripped")
    },
    RestartReason: {
        0: new EnumValue(0, "unknown"),
        1: new EnumValue(1, "coldstart"),
        2: new EnumValue(2, "warmstart"),
        3: new EnumValue(3, "detectedPowerLost"),
        4: new EnumValue(4, "detectedPoweredOff"),
        5: new EnumValue(5, "hardwareWatchdog"),
        6: new EnumValue(6, "softwareWatchdog"),
        7: new EnumValue(7, "suspended")
    },
    SecurityLevel: {
        0: new EnumValue(0, "incapable"),
        1: new EnumValue(1, "plain"),
        2: new EnumValue(2, "signed"),
        3: new EnumValue(3, "encrypted"),
        4: new EnumValue(4, "signedEndToEnd"),
        5: new EnumValue(5, "encryptedEndToEnd")
    },
    Segmentation: {
        0: new EnumValue(0, "segmentedBoth"),
        1: new EnumValue(1, "segmentedTransmit"),
        2: new EnumValue(2, "segmentedReceive"),
        3: new EnumValue(3, "noSegmentation")
    },
    ShedState: {
        0: new EnumValue(0, "shedInactive"),
        1: new EnumValue(1, "shedRequestPending"),
        2: new EnumValue(2, "shedCompliant"),
        3: new EnumValue(3, "shedNonCompliant")
    },
    SilencedState: {
        0: new EnumValue(0, "unsilenced"),
        1: new EnumValue(1, "audibleSilenced"),
        2: new EnumValue(2, "visibleSilenced"),
        3: new EnumValue(3, "allSilenced")
    },
    VtClass: {
        0: new EnumValue(0, "defaultTerminal"),
        1: new EnumValue(1, "ansi_x3_64"),
        2: new EnumValue(2, "dec_vt52"),
        3: new EnumValue(3, "dec_vt100"),
        4: new EnumValue(4, "dec_vt220"),
        5: new EnumValue(5, "hp_700_94"),
        6: new EnumValue(6, "ibm_3130")
    },
    WriteStatus: {
        0: new EnumValue(0, "idle"),
        1: new EnumValue(1, "inProgress"),
        2: new EnumValue(2, "successful"),
        3: new EnumValue(3, "failed")
    },
    AccumulatorStatus: {
        0: new EnumValue(0, "normal"),
        1: new EnumValue(1, "starting"),
        2: new EnumValue(2, "recovered"),
        3: new EnumValue(3, "abnormal"),
        4: new EnumValue(4, "failed")
    },
    MaxApduLength: {
        0: new EnumValue(50, "50"), // MinimumMessageSize
        1: new EnumValue(128, "128"), //
        2: new EnumValue(206, "206"), // Fits in a LonTalk frame
        3: new EnumValue(480, "480"), // Fits in an ARCNET frame
        4: new EnumValue(1024, "1024"), //
        5: new EnumValue(1476, "1476") // Fits in an ISO 8802-3 (Ethernet) frame
    },
    MaxSegments: {
        0: new EnumValue(2147483647, "2147483647"), // Integer.MAX_VALUE
        1: new EnumValue(2, "2"),
        2: new EnumValue(4, "4"),
        3: new EnumValue(8, "8"),
        4: new EnumValue(16, "16"),
        5: new EnumValue(32, "32"),
        6: new EnumValue(64, "64"),
        7: new EnumValue(2147483647, "2147483647") //
    },
    PrimitiveTypes: {
        0: new EnumValue(0, "NULL"),
        1: new EnumValue(1, "Boolean"),
        2: new EnumValue(2, "UnsignedInteger"),
        3: new EnumValue(3, "SignedInteger"),
        4: new EnumValue(4, "Real"),
        5: new EnumValue(5, "Double"),
        6: new EnumValue(6, "OctetString"),
        7: new EnumValue(7, "CharacterString"),
        8: new EnumValue(8, "BitString"),
        9: new EnumValue(9, "Enumerated"),
        10: new EnumValue(10, "Date"),
        11: new EnumValue(11, "Time"),
        12: new EnumValue(12, "ObjectIdentifier")
    }
}

var objectProperties = {

}